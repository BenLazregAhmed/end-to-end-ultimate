on:
  push:
    branches:
      - main
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io : ${{ secrets.TF_API_TOKEN }}
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.11.4
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Plan
        id: plan
        run: terraform plan
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -no-color

      - name: Authenticate gh CLI
        run: echo "${{ secrets.GH_PAT }}" | gh auth login --with-token
      - name: show outputs
        run: terraform output
      - name: Show EC2 Private Key and Public IP
        run: |
          echo "🔐 EC2 Private Key:"
          terraform output -raw private_key
          echo "🌐 EC2 Public IP:"
          terraform output -raw instance_public_ip

      - name: Store SSH key as GitHub secret
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          terraform output -raw private_key | gh secret set EC2_SSH_PRIVATE_KEY
      - name: Store ec2 ip addr as GitHub secret
        env:
          GH_TOKEN: ${{ secrets.GH_PAT}}
        run: |
          terraform output -raw instance_public_ip | gh secret set EC2_HOST

  test:
    name: "test"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: spring-end-to-end
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Test with Maven
        run: mvn test --file pom.xml
  docker:

    name: "build & push docker image"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: spring-end-to-end
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn clean package --file pom.xml
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - run: docker image build -t ahmedevops/end-to-end-spring:latest .

      - run: docker image push ahmedevops/end-to-end-spring:latest
  deploy:
    name: "deploying on aws"
    runs-on: ubuntu-latest
    needs:
      - terraform
      - docker
    env:
      PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      HOST: ${{ secrets.EC2_HOST }}

    steps:
      - name: Debug EC2 host
        run: |
          echo "HOST='$HOST'"
          echo "Length: ${#HOST}"

      - name: Deploy to EC2
        run: |
          echo "$PRIVATE_KEY" > github-ec2.pem && chmod 600 github-ec2.pem
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ubuntu@${HOST} << 'EOF'
            git pull
            cd /end-to-end-ultimate/docker
            docker compose up -d
          EOF

#      - name: Set up SSH
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
#
#      - name: Deploy using SSH and Docker Compose
#        run: |
#          ssh ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
#            git pull
#            cd /end-to-end-ultimate/docker
#            docker compose up -d
#          EOF